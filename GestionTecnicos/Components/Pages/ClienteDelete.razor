@page "/Cliente/Delete/{ClienteId:int}"
@inject ClientesService ClientesService
@rendermode InteractiveServer
@inject NavigationManager navigationManager

@*HTML*@
<PageTitle>Eliminar Cliente</PageTitle>
<EditForm Model="Cliente" OnValidSubmit="Eliminar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Eliminar Cliente</h5>
            </div>

            <div class="card-body ">
                <div class="text-center">
                    <h6 style="color: red; font-size: 2em; font-weight: normal;">¿Estás seguro de que quieres eliminar a este cliente?</h6>
                </div>
                <ul class="mt-4">
                    <li><strong>ClienteId: </strong>@Cliente.ClienteId</li>
                    <li><strong>RNC: </strong>@Cliente.Rnc</li>
                    <li><strong>Nombres: </strong>@Cliente.Nombres</li>
                    <li><strong>Dirección: </strong>@Cliente.Direccion , @Cliente.Ciudad?.CiudadNombre</li>
                    <li><strong>Direccion: </strong>@Cliente.Direccion</li>
                    <li><strong>LimiteCredito: </strong>@Cliente.LimiteCredito</li>
                </ul>
            </div>

            @*Footer*@
            <div class="card-footer text-center mt-2">
                <a href="/" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span>Volver</a>
                <button type="submit" class="btn btn-danger bi bi-trash"> Eliminar </button>
            </div>
        </div>
    </div>

    @* Notificaciones *@
    <label style="color:green;" hidden="@string.IsNullOrEmpty(Saved)">@Saved</label>
    <label style="color:red;" hidden="@string.IsNullOrEmpty(Error)">@Error</label>
</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }

    private string Error { get; set; } = string.Empty;
    private string Saved { get; set; } = string.Empty;
    private Clientes Cliente { get; set; } = new Clientes();

    protected override async Task OnInitializedAsync()
    {   
        Cliente = await ClientesService.Buscar(ClienteId);
    }

    public void Nuevo()
    {
        this.Cliente = new Clientes();
    }

    public async Task Eliminar()
    {
        Error = string.Empty;
        Saved = string.Empty;

        var eliminado = await ClientesService.Eliminar(Cliente.ClienteId);
        if (eliminado != null)
        {
            Saved = "Cliente Eliminado Exitosamente";
            navigationManager.NavigateTo("/");
        }
        else
        {
            Error = "Error al eliminar el Registro";
        }

        Nuevo();
    }
}
