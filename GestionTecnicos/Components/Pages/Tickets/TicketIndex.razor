@page "/Ticket"
@inject TicketsService TicketsServices
@rendermode InteractiveServer

@* HTML *@
<PageTitle>Consulta de Tickets</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header header-padding text-center">
            <h2 class="card-title">Consulta de Tickets</h2>
            <a href="/Ticket/Create" class="btn btn-success float-end">
                <span class="bi bi-plus-circle mt-3"></span> Crear
            </a>
        </div>
        <div class="card-body">
            @*Labels*@
            <div class="row">
                @*Filtrar por*@
                <div class="col-4">
                    <label class="col-form-label">Filtrar por</label>
                </div>

                @*ValorFiltro*@
                <div class="col-4">
                    <label class="col-form-label">Búsqueda</label>
                </div>
            </div>

            @*Inputs y botones*@
            <div class="row align-items-center">
                @*Filtro y Restablecer*@
                <div class="col-4">
                    <div class="input-group">
                        <InputSelect class="form-select" @bind-Value="Filtro">
                            <option value="" selected disabled>Elija una opción</option>
                            <option value="TicketId">TicketId</option>
                            <option value="ClienteId">ClienteId</option>
                            <option value="TecnicoId">TecnicoId</option>
                        </InputSelect>
                        <button type="button" class="btn btn-outline-secondary" @onclick="Restablecer">
                            <span class="bi bi-arrow-clockwise"></span>
                        </button>
                    </div>
                </div>

                @*Busqueda*@
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <span class="bi bi-search"></span> Buscar
                        </button>
                    </div>
                </div>
            </div>

            @* Tabla *@
            <table class="table table-hover text-center">
                <thead class="table-striped text-black" style="border-bottom: 3px solid green;">
                <tr>
                    <th>TicketId</th>
                    <th>Cliente</th>
                    <th>Técnico Encargado</th>
                    <th>Fecha</th>
                    <th>Prioridad</th>
                    <th>Asunto</th>
                    <th>Editar</th>
                    <th>Eliminar</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var ticket in ListaTickets)
                {
                    <tr>
                        <td>@ticket.TicketId</td>
                        <td>@ticket.Cliente.Nombres</td>
                        <td>@ticket.Cliente.Tecnico.Nombres</td>
                        <td>@ticket.Fecha.ToShortDateString()</td>
                        <td>@ticket.Prioridad</td>
                        <td>@ticket.Asunto</td>
                        <td>
                            <a class="btn btn-outline-success bi bi-pencil-fill" href="/Ticket/Edit/@ticket.TicketId"></a>
                        </td>
                        <td>
                            <a class="btn btn-outline-danger bi bi-trash-fill" href="/Ticket/Delete/@ticket.TicketId"></a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public List<Tickets?> ListaTickets { get; set; } = new List<Tickets?>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaTickets = await TicketsServices.Listar(t => t.TicketId > 0);
    }

    private async Task Buscar()
    {
        if (Filtro == "TicketId")
        {
            if (int.TryParse(ValorFiltro, out int ticketId))
            {
                ListaTickets = await TicketsServices.Listar(t => t.TicketId == ticketId);
            }
        }
        else if (Filtro == "ClienteId")
        {
            if (int.TryParse(ValorFiltro, out int clienteId))
            {
                ListaTickets = await TicketsServices.Listar(t => t.ClienteId == clienteId);
            }
        }

        StateHasChanged();
    }

    private async Task Restablecer()
    {
        ListaTickets = await TicketsServices.Listar(t => t.TicketId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
}