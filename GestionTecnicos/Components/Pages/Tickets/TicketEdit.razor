@page "/Ticket/Edit/{TicketId:int}"
@inject TicketsService TicketsService
@inject ClientesService ClientesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Editar Ticket</PageTitle>

<EditForm Model="Ticket" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white m-2">
                <h3 class="card-title">Editar Ticket</h3>
            </div>
            <div class="card-body">
                @* TicketId *@
                <div class="mb-3">
                    <label class="form-label">TicketId</label>
                    <InputNumber class="form-control small-input" @bind-Value="Ticket.TicketId" readonly />
                </div>

                @* Fecha de Ticket *@
                <div class="mb-3">
                    <label class="form-label">Fecha</label>
                    <InputDate class="form-control" @bind-Value="Ticket.Fecha" />
                </div>

                @* Prioridad *@
                <div class="mb-3">
                    <label class="form-label">Prioridad</label>
                    <InputSelect class="form-control form-select" @bind-Value="Ticket.Prioridad">
                        <option value="" selected disabled>Seleccione prioridad</option>
                        <option value="Baja">1-Baja</option>
                        <option value="Media">2-Media</option>
                        <option value="Alta">3-Alta</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => Ticket.Prioridad)" />
                </div>

                @* Asunto *@
                <div class="mb-3">
                    <label class="form-label">Asunto</label>
                    <InputText class="form-control wide-input" @bind-Value="Ticket.Asunto" />
                    <ValidationMessage For="@(() => Ticket.Asunto)" />
                </div>

                @* Descripcion *@
                <div class="mb-3">
                    <label class="form-label">Descripci√≥n</label>
                    <InputText class="form-control wide-input" @bind-Value="Ticket.Descripcion" />
                    <ValidationMessage For="@(() => Ticket.Descripcion)" />
                </div>

                @* Tiempo invertido (Horas) *@
                <div class="mb-3">
                    <label class="form-label">Tiempo invertido (Horas)</label>
                    <InputNumber class="form-control wide-input" @bind-Value="Ticket.TiempoInvertido" />
                </div>

                @* Cliente *@
                <div class="mb-3">
                    <label class="form-label">Cliente</label>
                    <InputSelect class="form-control form-select" @bind-Value="Ticket.ClienteId">
                        <option value="0" selected disabled>Seleccione un Cliente</option>
                        @foreach (var cliente in ListaClientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    </InputSelect>
                </div>
            </div>

            @* Footer *@
            <div class="card-footer mt-2 text-center">
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check-circle-fill"></span> Guardar
                </button>
                <a href="/Ticket" class="btn btn-outline-danger">
                    <span class="bi bi-arrow-bar-left"></span> Retroceder
                </a>
            </div>
        </div>
    </div>

    @* Notificaciones *@
    <label class="text-danger" hidden="@string.IsNullOrEmpty(MensajeError)">@MensajeError</label>
</EditForm>

@code {
    [Parameter]
    public int TicketId { get; set; }
    private Tickets Ticket { get; set; } = new Tickets();
    public string MensajeError { get; set; } = string.Empty;
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();

    protected override async Task OnInitializedAsync()
    {
        Ticket = await TicketsService.Buscar(TicketId);
        ListaClientes = await ClientesService.Listar(c => c.ClienteId > 0);
    }

    private async Task Modificar()
    {
        var creado = await TicketsService.Guardar(Ticket);
        if (creado)
        {
            navigationManager.NavigateTo("/Ticket");
        }
        else
        {
            MensajeError = "Error al guardar el Registro";
        }
    }
}