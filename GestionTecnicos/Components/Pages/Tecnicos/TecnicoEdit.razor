@page "/Edit/{TecnicoId:int}"
@inject TecnicosService tecnicosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@*HTML*@
<PageTitle>Editar</PageTitle>
<EditForm Model="Tecnico" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center bg-primary text-white m-2">
				<h3 class="card-title">Registro de Tecnicos</h3>
			</div>
			<div class="card-body">
				@*TecnicoId*@
				<div class="mb-3">
					<label class="form-label">TecnicoId</label>
					<InputNumber class="form-control small-input" @bind-Value="Tecnico.TecnicoId" readonly />
				</div>

				@*Nombres*@
				<div class="mb-3">
					<label class="form-label">Nombres</label>
					<InputText class="form-control wide-input" @bind-Value="Tecnico.Nombres"/>
					<ValidationMessage For="@(() => Tecnico.Nombres)"/>
				</div>

				@*SueldoHora*@
				<div class="mb-3">
					<label class="form-label">Sueldo por hora</label>
					<InputNumber class="form-control wide-input" @bind-Value="Tecnico.SueldoHora"/>
					<ValidationMessage For="@(() => Tecnico.SueldoHora)"/>
				</div>
			</div>

			@*Footer*@
			<div class="card-footer text-center mt-2">
				<button type="submit" class="btn btn-outline-success">
					<span class="bi bi-check-circle-fill"></span> Guardar
				</button>
				<a href="/" class="btn btn-outline-danger">
					<span class="bi bi-arrow-bar-left"></span> Retroceder
				</a>
			</div>
		</div>
	</div>

    	@*Notificaciones*@
	<label style="color:red;" hidden="@string.IsNullOrEmpty(Error)">@Error</label>
	<label style="color:green;" hidden="@string.IsNullOrEmpty(Saved)">@Saved</label>
</EditForm>

@code {
	[Parameter]
	public int TecnicoId { get; set; }

	private Tecnicos Tecnico { get; set; } = new Tecnicos();
	public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
	private string Error { get; set; } = string.Empty;
	private string Saved { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Tecnico = await tecnicosService.Buscar(TecnicoId);
		ListaTecnicos = await tecnicosService.Listar(t => t.TecnicoId > 0);

	}

private async Task<bool> Validar()
{
    Error = string.Empty;

    var TecnicosMismoNombre = ListaTecnicos
        .FirstOrDefault(t => t.Nombres == Tecnico.Nombres && t.TecnicoId != Tecnico.TecnicoId);

    if (TecnicosMismoNombre != null)
    {
        Error = "Ya existe otro tecnico con este nombre";
        return false;
    }

    return true;
}

	public async Task Guardar()
	{
		Error = string.Empty;
		Saved = string.Empty;

		if (!await Validar())
		{
			Error = "Ya existe un tecnico con este nombre";
			return;
		}
		var guardo = await tecnicosService.Guardar(this.Tecnico);
		if (guardo != null)
		{
			navigationManager.NavigateTo("/");
			Saved = "Tecnico Modificado Correctamente";
		}
		else
		{
			Error = "Error al modificar el Registro";
		}

	}

}