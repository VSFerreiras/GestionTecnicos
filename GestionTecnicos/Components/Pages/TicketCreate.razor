@page "/Ticket/Create"
@inject TicketsService TicketsService
@inject ClientesService ClientesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@* HTML *@
<PageTitle>Registro de Tickets</PageTitle>
<EditForm Model="Ticket" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Registro de Tickets</h5>
            </div>
            <div class="card-body">
                @* TicketId *@
                <div class="mb-3">
                    <label class="form-label"><strong>TicketId</strong></label>
                    <InputNumber class="form-control" @bind-Value="Ticket.TicketId" readonly />
                </div>

                @* Fecha de Ticket *@
                <div class="mb-3">
                    <label class="form-label"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Ticket.Fecha" />
                </div>

                @* Prioridad *@
                <div class="mb-3">
                    <label class="form-label"><strong>Prioridad</strong></label>
                    <InputSelect class="form-control form-select" @bind-Value="Ticket.Prioridad">
                        <option value="0" selected disabled>Seleccione prioridad</option>
                        <option value="Baja">1-Baja</option>
                        <option value="Media">2-Media</option>
                        <option value="Alta">3-Alta</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => Ticket.Prioridad)" />
                </div>

                @* Asunto *@
                <div class="mb-3">
                    <label class="form-label"><strong>Asunto</strong></label>
                    <InputText class="form-control" @bind-Value="Ticket.Asunto" />
                    <ValidationMessage For="@(() => Ticket.Asunto)" />
                </div>

                @* Descripcion *@
                <div class="mb-3">
                    <label class="form-label"><strong>Descripci√≥n</strong></label>
                    <InputText class="form-control" @bind-Value="Ticket.Descripcion" />
                    <ValidationMessage For="@(() => Ticket.Descripcion)" />
                </div>

                @* Tiempo invertido (Horas) *@
                <div class="mb-3">
                    <label class="form-label"><strong>Tiempo invertido (Horas)</strong></label>
                    <InputNumber class="form-control" @bind-Value="Ticket.TiempoInvertido" />
                </div>

                @* Cliente *@
                <div class="mb-3">
                    <label class="form-label"><strong>Cliente</strong></label>
                    <InputSelect class="form-control form-select" @bind-Value="Ticket.ClienteId">
                        <option value="0" selected disabled>Seleccione un Cliente</option>
                        @foreach (var cliente in ListaClientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    </InputSelect>
                </div>
            </div>

            @* Footer *@
            <div class="card-footer text-center mt-2">
                <a href="/Ticket" class="btn btn-secondary"><span class="bi bi-arrow-left"></span> Retroceder</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar </button>
                <button type="button" class="btn btn-outline-success" @onclick="Nuevo">Nuevo</button>
            </div>
        </div>
    </div>

    @* Notificaciones *@
    <label style="color:red;" hidden="@string.IsNullOrEmpty(MensajeError)">@MensajeError</label>
</EditForm>

@code {
    private Tickets Ticket { get; set; } = new Tickets();
    public string MensajeError { get; set; } = string.Empty;
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();

    public void Nuevo()
    {
        this.Ticket = new Tickets();
    }

    private async Task Guardar()
    {
        var creado = await TicketsService.Guardar(Ticket);
        if (creado)
        {
            navigationManager.NavigateTo("/Ticket");
        }
        else
        {
            MensajeError = "Error al guardar el Registro";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ListaClientes = await ClientesService.Listar(c => c.ClienteId > 0);
    }
}